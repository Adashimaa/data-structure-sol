/**
 *
 * @author sapondanai
 */

class Node {

  String name;
  int value; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ
  long timestamp;
  boolean isAmerican; // ‡∏ñ‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  int salary; // ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏µ
   * - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏¥‡πà‡∏° 100,000
   * @return ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ
   */
  public int getTotalAnnualSalary() {
    var total = salary;
    if (!isAmerican) {
      total += 100000; // ‡πÇ‡∏î‡∏ô‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ô isAmerican üíÄüíÄüíÄ
    }
    return total;
  }

  public Node(String name, int value, boolean isAmerican, int salary) {
    this.name = name;
    this.value = value;
    this.isAmerican = isAmerican;
    this.salary = salary;
  }

  // This function will return true if Priority(thisNode) > Priority(otherNode)

  // this node = parent node

  /**
   * ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö priority ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á node ‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö node ‡∏≠‡∏∑‡πà‡∏ô
   * @param other node ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
   * @param isMinHeap true = min heap, false = max heap
   * @return true ‡∏ñ‡πâ‡∏≤ node ‡∏ô‡∏µ‡πâ‡∏°‡∏µ priority ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ node ‡∏≠‡∏∑‡πà‡∏ô
   * 
   * ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:
   * 1. ‡∏ñ‡πâ‡∏≤ value ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô -> ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ salary (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞)
   * 2. ‡∏ñ‡πâ‡∏≤ salary ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô -> ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ value (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞)
   * 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà:
   *    - MinHeap: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ salary (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞)
   *    - MaxHeap: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ value (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞)
   */
  public boolean compare(Node other, boolean isMinHeap) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: value ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô -> ‡πÉ‡∏ä‡πâ salary ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞)
    if (this.value == other.value) {

      return getTotalAnnualSalary() < other.getTotalAnnualSalary(); // FIX THIS
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: salary ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô -> ‡πÉ‡∏ä‡πâ value ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞)
    else if (getTotalAnnualSalary() == other.getTotalAnnualSalary()) {
      return this.value > other.value; // FIX THIS
    }
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
    else {

      // Min Heap: salary ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ä‡∏ô‡∏∞

      if (isMinHeap) {
        return getTotalAnnualSalary() < other.getTotalAnnualSalary(); // FIX THIS
      } else if (!isMinHeap) { // maxHeap
        // Max Heap: value ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞

        return this.value > other.value; // FIX THIS
      } else {
        // ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ timestamp (‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞)

        return this.timestamp < other.timestamp;
      }
    }
  }

  public Node() {} // Dummy constructor, no need to edit

  @Override
  public String toString() {
    return "Name: " + name +
      ", Value: " + Integer.toString(value) +
      ", Salary: " + Integer.toString(salary) +
      ", IsAmerican: " + Boolean.toString(isAmerican) +
      ", Total Annual Salary: " + Integer.toString(getTotalAnnualSalary()) +
      ", Timestamp: " + Long.toString(timestamp);
  }
}